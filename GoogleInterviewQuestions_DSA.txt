+SQL
+Python/C#
+Tableau/PowerBI
+Python Libraries
+Probability Statistics and Hypothesis Testing
+Data Structures and Algorithms
+System Design
+LLD and HLD


Suppose we have a set of dominos, laid down in a line like this:

Imagine you’re playing a game, where the goal is to make the sum of the top row of numbers greater than or equal to some target value. You may choose any dominos in the line to flip so that the top and bottom numbers are swapped.

Write a program to calculate the minimum number of flips required to achieve the goal.

Tr = [1,4,6,3]
Br = [2,6,5,6]
Dr = [1,2,1,3] – SubProblem
Dr_s = [1,1,2,3] 
Tr = [2,4,6,4]

Target = N (17)
SumTr = 14
Diff = 3

sum(Tr)>=N

Def minFlips(Tr, Br, N) -> int:
	arrLen = len(Tr)
	TrSum = sum(Tr)
	Flips = 0
	
	#Base condition check
If TrSum >= N:
	Return 0
	
	# Code to build diff array
	i=0
	Dr =[]
	While i <= arrLen:
		If Br[i] > Tr[i]:
			Dr.append(Br[i] - Tr[i])
		Else:
			Dr.append(0)
		i+=1
	Diff = N - TrSum 
	#Sort diff array
	Dr_s = sort(Dr)
	
	
	#Iterate until you cross diff 
	currSum = 0
	For i in Dr_s[::-1]:
		CurrSum +=i
		Flips+=1
		If CurrSum > diff:
			Break;
	If currSum < diff:
		Return -1
	Return Flips
		
		
	


Connected Components - UnionFind - LeetCode 323
Alien Dictionary - Topological Sort - LeetCode 269
Dijkstra Shortest Path - ElogV - Heap/PriorityQueue - Network Delay Time -LeetCode 743
Prims or Kruskal's algorithms - Minimum Spanning Tree
Floydd Warshall's 


===================================Question 2 =========================================

'''

ZIP encodes data using binary prefix trees (aka Huffman trees)
In a binary prefix tree, values can only appear at the leaves of the tree

To decode a file, we read bits from the file, use them to follow a path in the tree to a leaf, which determines a value:
- We start at the root of the tree
- When encountering a 0 bit, we descend to the left child, and when encountering a 1 bit we descend to the right child
- When reaching a leaf, we emit the value stored in the leaf

Attached below is a sample tree:
  *      0 = left, 1 = right
 / \
e   *        e = 0
   / \       b = 10
  b   z      z = 11

To save the tree efficiently in ZIP files, we save a mapping from byte-value to bit-length. For example:
{'b': 2, 'e': 1, 'z': 2}

To make sure the mapping only represents a single tree, the tree must satisfy the following properties:
1. Short paths (in the tree) are to the left of long paths
2. Within the same length, smaller values appear to the left of larger values (so 'b' to the left of 'z', etc.)

The main question: Given the encoding (byte->length mapping), construct a valid tree. Analyze the runtime complexity.
'''

{'a': 1, 'b': 2 ,  'c': 3 ,  'd': 3}

{ 1 : ['a'] , 2 : ['b', 'e', 'f'] ,  3 : ['c', 'd' ]}

{'a': 0}  -> {0 :['a']}

     *
    / \
   a   *
 / \  / \
e  f  b  *
        / \ 
       c   d

class TreeNode:
  def __init__(self,val, left = None, right = None):
    self.val = val
    self.left = left
    self.right = Right
    

{'b': 2, 'e': 1, 'z': 2}  

{1 : ['e'], 2:['b', 'z']}
['e']
['b','z']


def buildTree(input):
  if len(input) == 0:
    return None
  if len(input) <= 1:
    return TreeNode(input[0][0])
  else:
    curr = TreeNode('*')
    # Assume the dict is sorted based on level
    for l in input.values():
        curr.left= l[0]
        if len(l) != 1 :
          curr.right = l[1]
        curr.right = '*'
        curr = curr.right
      



============================================Question 3 ===============================
Tasks: [{id1, 2, 10}, {id2, 3, 7}, {id3, 6, 3}, {id4, 12, 1}]
Output: id1, id3, id2


# Find the task that has the minimun timestep value.
def findTheLeastTimeStepTask(Tasks) -> Task:
  leastTimeStep = 0
  for item in Tasks:
    item[1] == 0:
      return item

def taksExList(Tasks) -> list:
  outputList=[]
  firstTask, index = findTheLeastTimeStepTask(Tasks)
  execTime = firstTask[3]
  outputList.append(firstTask[0])
  TasksList.pop(index)
  # Recursive
  for i in range(len(Tasks)-1):
    if len(Tasks) == 0:
      break
    nextExTask, index = search(TaskLists,execTime)
    outputList.append(nextExTask[0])
    prevExecTime = execTime
    execTime = execTime+ nextExTask[3]
  
  return outputList

# This function will filter out the tasks that have the time step value less than the input execTime
def filterTasks(Tasks,execTime )->List[Tasks]:
  
  return filteredTasks

# MinHeap builder function using the list of tasks object

def buildMinHeap(List[Tasks]) -> heap:
  return heap

# Recursively add minHeap using this function
def search(Tasks,execTime) -> Tuple, int:
  filteredTasks=filterTasks(Tasks, execTime)
  
  # Find the list of tasks that are not covered before in the minHeap 
  # based on the prevExecTime and execTime
  if diffTasks is not None:
    minHeap.add(diffTasks)
  
  # Build minHeap based on the execTime
  x = minHeap(filteredTaks)
  
  return x[0]
    
  
  
  
  